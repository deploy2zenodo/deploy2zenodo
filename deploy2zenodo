#!/usr/bin/env sh
set -e

#    deploy2zenodo
#    Copyright (C) 2023  Daniel Mohr
#    Version: 0.0.9
#
# Instead of command line parameters we use environment variables.
#
# You have to provide:
#   * DEPLOY2ZENODO_API_URL
#   * DEPLOY2ZENODO_ACCESS_TOKEN
#   * DEPLOY2ZENODO_DEPOSITION_ID
#   * DEPLOY2ZENODO_JSON
#   * DEPLOY2ZENODO_UPLOAD
#
# For more information see: https://gitlab.com/deploy2zenodo/deploy2zenodo
#
# Copyright 2023 Daniel Mohr and
#    Deutsches Zentrum fuer Luft- und Raumfahrt e. V., D-51170 Koeln
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

VERSION=$(sed -n 's/^.*Version:\s*\(\S*\)$/\1/p' "$0")

echo "run deploy2zenodo v$VERSION"

# check available variables
missing_variables=""
for varname in DEPLOY2ZENODO_API_URL DEPLOY2ZENODO_ACCESS_TOKEN DEPLOY2ZENODO_DEPOSITION_ID DEPLOY2ZENODO_JSON DEPLOY2ZENODO_UPLOAD; do
    if [ -z "$(eval "echo \"\$$varname\"")" ]; then
	missing_variables="$missing_variables $varname"
    fi
done

if [ -n "$missing_variables" ]; then
    echo "ERROR: you have to provide environment variables"
    echo "missing variables are at least:$missing_variables"
    exit 1
else
    for varname in DEPLOY2ZENODO_API_URL DEPLOY2ZENODO_DEPOSITION_ID DEPLOY2ZENODO_JSON DEPLOY2ZENODO_UPLOAD; do
	echo "$varname: $(eval "echo \"\$$varname\"")"
    done
fi

hjson='Content-Type: application/json'
hauth="Authorization: Bearer $DEPLOY2ZENODO_ACCESS_TOKEN"

set -x

jq . "$DEPLOY2ZENODO_JSON"

if [ "$DEPLOY2ZENODO_DEPOSITION_ID" = "create NEW record" ]; then
    # create new record
    echo "create new record"
    #   * create new record and upload metadata
    NEWRECORD="$(curl --header "$hjson" --header "$hauth" --request POST --data-binary "$(cat "$DEPLOY2ZENODO_JSON")" "$DEPLOY2ZENODO_API_URL"/deposit/depositions)"
    echo "$NEWRECORD" | jq .
    DEPLOY2ZENODO_DEPOSITION_ID=$(echo "$NEWRECORD" | jq .id)
    test "$DEPLOY2ZENODO_DEPOSITION_ID" != "null"
    echo "##################################################################"
    echo "# add the id of the deposition/record on zenodo for the next run #"
    echo "# id: $DEPLOY2ZENODO_DEPOSITION_ID"
    echo "#                                                                #"
    echo "# DEPLOY2ZENODO_DEPOSITION_ID=$DEPLOY2ZENODO_DEPOSITION_ID"
    echo "##################################################################"
    BUCKETURLRAW=$(echo "$NEWRECORD" | jq .links.bucket)
    test "$BUCKETURLRAW" != "null"
    BUCKETURL=$(echo "$BUCKETURLRAW" | sed 's/"//g')

    #   * upload files/archive
    FILEUPLOAD=$(curl --header "$hauth" --upload-file "$DEPLOY2ZENODO_UPLOAD" "$BUCKETURL"/"$(basename "$DEPLOY2ZENODO_UPLOAD")")
    echo "$FILEUPLOAD" | jq .
    CHECKSUM=$(echo "$FILEUPLOAD" | jq .checksum)
    test "$CHECKSUM" != "null"
    CHECKSUM=$(echo "$CHECKSUM" | sed 's/"//g' | cut -d ':' -f 2)
    echo "$CHECKSUM  $DEPLOY2ZENODO_UPLOAD" | md5sum -c -

    #   * publish
    PUBLISHRECORD=$(curl --max-time 300 --header "$hauth" --request POST "$DEPLOY2ZENODO_API_URL"/deposit/depositions/"$DEPLOY2ZENODO_DEPOSITION_ID"/actions/publish)
    echo "$PUBLISHRECORD" | jq .
    test "$(echo "$PUBLISHRECORD" | jq .submitted)" = "true"
    echo "##################################################################"
    echo "# add the id of the deposition/record on zenodo for the next run #"
    echo "# id: $DEPLOY2ZENODO_DEPOSITION_ID"
    echo "#                                                                #"
    echo "# DEPLOY2ZENODO_DEPOSITION_ID=$DEPLOY2ZENODO_DEPOSITION_ID"
    echo "##################################################################"
else
    # update record
    #   * publish
    echo "update record"
    #   * get data from record
    RECORD=$(curl --header "$hauth" "$DEPLOY2ZENODO_API_URL"/deposit/depositions/"$DEPLOY2ZENODO_DEPOSITION_ID")
    echo "$RECORD" | jq .
    NEWVERSIONURLRAW=$(echo "$RECORD" | jq .links.newversion)
    test "$NEWVERSIONURLRAW" != "null"
    NEWVERSIONURL=$(echo "$NEWVERSIONURLRAW" | sed 's/"//g')

    #   * create new version
    NEWVERSION=$(curl --header "$hauth" --request POST "$NEWVERSIONURL")
    echo "$NEWVERSION" | jq .
    LATESTDRAFTRAW=$(echo "$NEWVERSION" | jq .links.latest_draft)
    test "$LATESTDRAFTRAW" != "null"
    LATESTDRAFT=$(echo "$LATESTDRAFTRAW" | sed 's/"//g')
    BUCKETURLRAW=$(echo "$NEWVERSION" | jq .links.bucket)
    test "$BUCKETURLRAW" != "null"
    BUCKETURL=$(echo "$BUCKETURLRAW" | sed 's/"//g')

    #   * update metadata
    UPLOADMETADATA=$(curl --header "$hauth" --header "$hjson" --request PUT --data-binary "$(cat "$DEPLOY2ZENODO_JSON")" "$LATESTDRAFT")
    echo "$UPLOADMETADATA" | jq .

    #   * remove all files from new version
    for id in $(echo "$UPLOADMETADATA" | jq ".files[] | .id"); do
	id=$(echo "$id" | sed 's/"//g')
	echo "$id"
	DELETEFILE=$(curl --header "$hauth" --request DELETE "$LATESTDRAFT"/files/"$id")
	echo "$DELETEFILE"
	echo "$DELETEFILE" | jq .
    done

    #   * upload files/archive
    FILEUPLOAD=$(curl --header "$hauth" --upload-file "$DEPLOY2ZENODO_UPLOAD" "$BUCKETURL"/"$(basename "$DEPLOY2ZENODO_UPLOAD")")
    echo "$FILEUPLOAD" | jq .
    CHECKSUM=$(echo "$FILEUPLOAD" | jq .checksum)
    test "$CHECKSUM" != "null"
    CHECKSUM=$(echo "$CHECKSUM" | sed 's/"//g')
    CHECKSUM=$(echo "$CHECKSUM" | cut -d ':' -f 2)
    echo "$CHECKSUM  $DEPLOY2ZENODO_UPLOAD" | md5sum -c -

    #   * publish
    PUBLISHRECORD=$(curl --max-time 300 --header "$hauth" --request POST "$LATESTDRAFT"/actions/publish)
    echo "$PUBLISHRECORD" | jq .
    test "$(echo "$PUBLISHRECORD" | jq .submitted)" = "true"
fi

# stop deploy2zenodo
