#!/usr/bin/env sh
set -e

#    deploy2zenodo
#    Copyright (C) 2023  Daniel Mohr
#    Version: 0.5.4
#    DOI: 10.5281/zenodo.10112959
#
# Instead of command line parameters we use environment variables.
#
# You have to provide:
#   * DEPLOY2ZENODO_API_URL
#   * DEPLOY2ZENODO_ACCESS_TOKEN
#   * DEPLOY2ZENODO_DEPOSITION_ID
#   * DEPLOY2ZENODO_JSON
#   * DEPLOY2ZENODO_UPLOAD
#
# And there are optional variables you can provide:
#   * DEPLOY2ZENODO_SKIP_PUBLISH
#   * DEPLOY2ZENODO_DRYRUN
#   * DEPLOY2ZENODO_SKIPRUN
#   * DEPLOY2ZENODO_SKIP_NEW_VERSION
#   * DEPLOY2ZENODO_GET_METADATA
#   * DEPLOY2ZENODO_SKIP_UPLOAD
#   * DEPLOY2ZENODO_CURL_MAX_TIME
#   * DEPLOY2ZENODO_CURL_MAX_TIME_PUBLISH
#   * DEPLOY2ZENODO_ADD_IsCompiledBy_DEPLOY2ZENODO
#
# For more information see: https://gitlab.com/deploy2zenodo/deploy2zenodo
#
# Copyright 2023 Daniel Mohr and
#    Deutsches Zentrum fuer Luft- und Raumfahrt e. V., D-51170 Koeln
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

VERSION=$(sed -n 's/^#.*Version:\s*\(\S*\)$/\1/p' "$0")
DEPLOY2ZENODO_DOI=$(sed -n 's/^#.*DOI:\s*\(\S*\)$/\1/p' "$0")

echo "run deploy2zenodo v$VERSION (DOI: $DEPLOY2ZENODO_DOI)"

# check available variables
missing_variables=""
for varname in DEPLOY2ZENODO_API_URL DEPLOY2ZENODO_ACCESS_TOKEN DEPLOY2ZENODO_DEPOSITION_ID DEPLOY2ZENODO_JSON DEPLOY2ZENODO_UPLOAD; do
    if [ -z "$(eval "echo \"\$$varname\"")" ]; then
        missing_variables="$missing_variables $varname"
    fi
done
if [ -n "$missing_variables" ]; then
    echo "ERROR: you have to provide environment variables"
    echo "missing variables are at least:$missing_variables"
    exit 1
else
    for varname in DEPLOY2ZENODO_API_URL DEPLOY2ZENODO_DEPOSITION_ID DEPLOY2ZENODO_JSON DEPLOY2ZENODO_UPLOAD DEPLOY2ZENODO_SKIP_PUBLISH DEPLOY2ZENODO_DRYRUN DEPLOY2ZENODO_SKIPRUN DEPLOY2ZENODO_SKIP_NEW_VERSION DEPLOY2ZENODO_GET_METADATA DEPLOY2ZENODO_SKIP_UPLOAD DEPLOY2ZENODO_CURL_MAX_TIME DEPLOY2ZENODO_CURL_MAX_TIME_PUBLISH DEPLOY2ZENODO_ADD_IsCompiledBy_DEPLOY2ZENODO; do
        echo "$varname: \"$(eval "echo \"\$$varname\"")\""
    done
fi

if [ -n "$DEPLOY2ZENODO_SKIP_UPLOAD" ] && [ -z "$DEPLOY2ZENODO_SKIP_PUBLISH" ]; then
    echo "ERROR: DEPLOY2ZENODO_SKIP_UPLOAD can only be used if DEPLOY2ZENODO_SKIP_PUBLISH is used, too!"
    exit 1
fi
if [ -n "$DEPLOY2ZENODO_DRYRUN" ] || [ -n "$DEPLOY2ZENODO_SKIPRUN" ]; then
    curl() {
        echo "$@" > /dev/null
    }
fi
if [ -n "$DEPLOY2ZENODO_SKIPRUN" ]; then
    jq() {
        echo "$@" > /dev/null
    }
    md5sum() {
        echo "$@" > /dev/null
    }
fi

CURL_MAX_TIME_PUBLISH=${DEPLOY2ZENODO_CURL_MAX_TIME_PUBLISH:-300}
hjson='Content-Type: application/json'
alias curlauth='curl --header "Authorization: Bearer $DEPLOY2ZENODO_ACCESS_TOKEN"  --max-time "${DEPLOY2ZENODO_CURL_MAX_TIME:-60}"'

echojq() {
    if [ -z "$1" ]; then
        echo "$1"
        exit 1
    fi
    echo "$1" | jq -C . || (echo "$1" && exit 1)
}

set -x

jq -C . "$DEPLOY2ZENODO_JSON"
DEPLOY2ZENODO_JSON_DATA="$(jq -c . "$DEPLOY2ZENODO_JSON")"

if [ -n "$DEPLOY2ZENODO_ADD_IsCompiledBy_DEPLOY2ZENODO" ]; then
    IsCompiledBy="{\"relation\":\"IsCompiledBy\",\"identifier\":\"$DEPLOY2ZENODO_DOI\",\"scheme\":\"doi\",\"resource_type\":\"software\"}"
    echo "add IsCompiledBy:"
    echojq "$IsCompiledBy"
    DEPLOY2ZENODO_JSON_DATA=$(echo "$DEPLOY2ZENODO_JSON_DATA" | jq -c ".metadata.related_identifiers += [$IsCompiledBy]")
    echojq "$DEPLOY2ZENODO_JSON_DATA"
fi

if [ "$DEPLOY2ZENODO_UPLOAD" = "do NOT provide data" ]; then
    DEPLOY2ZENODO_JSON_DATA=$(echo "$DEPLOY2ZENODO_JSON_DATA" | jq '.files = {"enabled": false}')
    echojq "$DEPLOY2ZENODO_JSON_DATA"
fi

if [ "$DEPLOY2ZENODO_DEPOSITION_ID" = "create NEW record" ]; then
    # create new record
    echo "create new record"
    #   * create new record and upload metadata
    NEWRECORD="$(curlauth --header "$hjson" --request POST --data-binary "$DEPLOY2ZENODO_JSON_DATA" "$DEPLOY2ZENODO_API_URL"/deposit/depositions)"
    echojq "$NEWRECORD"
    DEPLOY2ZENODO_DEPOSITION_ID=$(echo "$NEWRECORD" | jq .id)
    LATESTID=$DEPLOY2ZENODO_DEPOSITION_ID
    test -n "$DEPLOY2ZENODO_DEPOSITION_ID" -a "$DEPLOY2ZENODO_DEPOSITION_ID" != "null"
    echo "##################################################################"
    echo "# add the id of the deposition/record on zenodo for the next run #"
    echo "# id: $DEPLOY2ZENODO_DEPOSITION_ID"
    echo "#                                                                #"
    echo "# DEPLOY2ZENODO_DEPOSITION_ID=$DEPLOY2ZENODO_DEPOSITION_ID"
    echo "##################################################################"
    LATESTDRAFT=$(echo "$NEWRECORD" | jq -r .links.latest_draft)
    test -n "$LATESTDRAFT" -a "$LATESTDRAFT" != "null"
    BUCKETURL=$(echo "$NEWRECORD" | jq -r .links.bucket)
    test -n "$BUCKETURL" -a "$BUCKETURL" != "null"

    #   * upload files/archives
    if [ -n "$DEPLOY2ZENODO_SKIP_UPLOAD" ]; then
        echo "##############################"
        echo "# skip upload files/archives #"
        echo "##############################"
    else
        if [ "$DEPLOY2ZENODO_UPLOAD" = "do NOT provide data" ]; then
            echo "#####################################"
            echo "# do not provide any files/archives #"
            echo "#####################################"
        else
            for filename in $DEPLOY2ZENODO_UPLOAD; do
                FILEUPLOAD=$(curlauth --upload-file "$filename" "$BUCKETURL"/"$(basename "$filename")")
                echojq "$FILEUPLOAD"
                CHECKSUM=$(echo "$FILEUPLOAD" | jq .checksum)
                test -n "$CHECKSUM" -a "$CHECKSUM" != "null"
                CHECKSUM=$(echo "$CHECKSUM" | sed 's/"//g' | cut -d ':' -f 2)
                if [ -n "$DEPLOY2ZENODO_DRYRUN" ] || [ -n "$DEPLOY2ZENODO_SKIPRUN" ]; then
                    echo "Skip testing checksum due to DRYRUN or SKIPRUN."
                else
                    echo "$CHECKSUM  $filename" | md5sum -c -
                fi
            done
        fi
    fi

    #   * publish
    if [ -n "$DEPLOY2ZENODO_SKIP_PUBLISH" ]; then
        echo "#################################################"
        echo "# --> Publishing is skipped!                    #"
        echo "# --> You have to publish this record manually! #"
        echo "#################################################"
    else
        PUBLISHRECORD=$(curlauth --max-time "$CURL_MAX_TIME_PUBLISH" --request POST "$LATESTDRAFT"/actions/publish)
        echojq "$PUBLISHRECORD"
        if [ -n "$DEPLOY2ZENODO_DRYRUN" ] || [ -n "$DEPLOY2ZENODO_SKIPRUN" ]; then
            echo "Skip testing result due to DRYRUN or SKIPRUN."
        else
            if [ "$DEPLOY2ZENODO_UPLOAD" = "do NOT provide data" ]; then
                # Check for error 'Missing uploaded files.'
                if [ "$(echo "$PUBLISHRECORD" | jq .status)" = 400 ] && [ "$(echo "$PUBLISHRECORD" | jq .errors[].field)" = "\"files.enabled\"" ]; then
                    # Seems used zenodo instance does not support
                    # metadata-only records. Try to use empty dummy file.
                    dummyfile="$(mktemp)"
                    FILEUPLOAD=$(curlauth --upload-file "$dummyfile" "$BUCKETURL/dummy")
                    echojq "$FILEUPLOAD"
                    CHECKSUM=$(echo "$FILEUPLOAD" | jq .checksum)
                    test -n "$CHECKSUM" -a "$CHECKSUM" != "null"
                    CHECKSUM=$(echo "$CHECKSUM" | sed 's/"//g' | cut -d ':' -f 2)
                    if [ -n "$DEPLOY2ZENODO_DRYRUN" ] || [ -n "$DEPLOY2ZENODO_SKIPRUN" ]; then
                        echo "Skip testing checksum due to DRYRUN or SKIPRUN."
                    else
                        echo "$CHECKSUM  $dummyfile" | md5sum -c -
                    fi
                    PUBLISHRECORD=$(curlauth --max-time "$CURL_MAX_TIME_PUBLISH" --request POST "$LATESTDRAFT"/actions/publish)
                    echojq "$PUBLISHRECORD"
                fi
            fi
            test "$(echo "$PUBLISHRECORD" | jq .state)" = '"done"'
            test "$(echo "$PUBLISHRECORD" | jq .submitted)" = "true"
        fi
    fi
    echo "##################################################################"
    echo "# add the id of the deposition/record on zenodo for the next run #"
    echo "# id: $DEPLOY2ZENODO_DEPOSITION_ID"
    echo "#                                                                #"
    echo "# DEPLOY2ZENODO_DEPOSITION_ID=$DEPLOY2ZENODO_DEPOSITION_ID"
    echo "##################################################################"
else
    # update record
    echo "update record"
    #   * get data from record
    RECORD=$(curlauth "$DEPLOY2ZENODO_API_URL"/deposit/depositions/"$DEPLOY2ZENODO_DEPOSITION_ID")
    echojq "$RECORD"
    NEWVERSIONURL=$(echo "$RECORD" | jq -r .links.newversion)
    test -n "$NEWVERSIONURL" -a "$NEWVERSIONURL" != "null"

    #   * create new version
    if [ -n "$DEPLOY2ZENODO_SKIP_NEW_VERSION" ]; then
        echo "#########################################"
        echo "# --> Creating new version is skipped!  #"
        echo "# --> Try to find latest draft.         #"
        echo "#########################################"
        conceptrecid=$(echo "$RECORD" | jq .conceptrecid)
        test -n "$conceptrecid" -a "$conceptrecid" != "null"
        LISTRES=$(curlauth "$DEPLOY2ZENODO_API_URL"/deposit/depositions?conceptrecid="$conceptrecid")
        LATESTRECORDPRE=$(echo "$LISTRES" | jq -c ".[] | select(.conceptrecid==\"$conceptrecid\" and .state!=\"done\")")
        LATESTID=$(echo "$LATESTRECORDPRE" | jq .id)
        echo "#############################"
        echo "# found latest id: $LATESTID"
        echo "#############################"
        LATESTRECORD=$(curlauth "$DEPLOY2ZENODO_API_URL/deposit/depositions/$LATESTID")
        echojq "$LATESTRECORD"
        LATESTDRAFT=$(echo "$LATESTRECORD" | jq -r .links.latest_draft)
        test -n "$LATESTDRAFT" -a "$LATESTDRAFT" != "null"
        BUCKETURL=$(echo "$LATESTRECORD" | jq -r .links.bucket)
    test -n "$BUCKETURL" -a "$BUCKETURL" != "null"
    else
        NEWVERSION=$(curlauth --request POST "$NEWVERSIONURL")
        echojq "$NEWVERSION"
        LATESTDRAFT=$(echo "$NEWVERSION" | jq -r .links.latest_draft)
        test -n "$LATESTDRAFT" -a "$LATESTDRAFT" != "null"
        BUCKETURL=$(echo "$NEWVERSION" | jq -r .links.bucket)
        test -n "$BUCKETURL" -a "$BUCKETURL" != "null"
        LATESTID=$(echo "$NEWVERSION" | jq .id)
        echo "#############################"
        echo "# found latest id: $LATESTID"
        echo "#############################"
    fi

    #   * update metadata
    UPLOADMETADATA=$(curlauth --header "$hjson" --request PUT --data-binary "$DEPLOY2ZENODO_JSON_DATA" "$LATESTDRAFT")
    echojq "$UPLOADMETADATA"

    #   * remove all files from new version
    for id in $(echo "$UPLOADMETADATA" | jq ".files[] | .id"); do
        id=$(echo "$id" | sed 's/"//g')
        echo "$id"
        DELETEFILE=$(curlauth --request DELETE "$LATESTDRAFT"/files/"$id")
        echojq "$DELETEFILE"
    done

    #   * upload files/archives
    if [ -n "$DEPLOY2ZENODO_SKIP_UPLOAD" ]; then
        echo "##############################"
        echo "# skip upload files/archives #"
        echo "##############################"
    else
        if [ "$DEPLOY2ZENODO_UPLOAD" = "do NOT provide data" ]; then
            echo "#####################################"
            echo "# do not provide any files/archives #"
            echo "#####################################"
        else
            for filename in $DEPLOY2ZENODO_UPLOAD; do
                FILEUPLOAD=$(curlauth --upload-file "$filename" "$BUCKETURL"/"$(basename "$filename")")
                echojq "$FILEUPLOAD"
                CHECKSUM=$(echo "$FILEUPLOAD" | jq .checksum)
                test -n "$CHECKSUM" -a "$CHECKSUM" != "null"
                CHECKSUM=$(echo "$CHECKSUM" | sed 's/"//g')
                CHECKSUM=$(echo "$CHECKSUM" | cut -d ':' -f 2)
                if [ -n "$DEPLOY2ZENODO_DRYRUN" ] || [ -n "$DEPLOY2ZENODO_SKIPRUN" ]; then
                    echo "Skip testing checksum due to DRYRUN or SKIPRUN."
                else
                    echo "$CHECKSUM  $filename" | md5sum -c -
                fi
            done
        fi
    fi

    #   * publish
    if [ -n "$DEPLOY2ZENODO_SKIP_PUBLISH" ]; then
        echo "#################################################"
        echo "# --> Publishing is skipped!                    #"
        echo "# --> You have to publish this record manually! #"
        echo "#################################################"
    else
        PUBLISHRECORD=$(curlauth --max-time "$CURL_MAX_TIME_PUBLISH" --request POST "$LATESTDRAFT"/actions/publish)
        echojq "$PUBLISHRECORD"
        if [ -n "$DEPLOY2ZENODO_DRYRUN" ] || [ -n "$DEPLOY2ZENODO_SKIPRUN" ]; then
            echo "Skip testing result due to DRYRUN or SKIPRUN."
        else
            if [ "$DEPLOY2ZENODO_UPLOAD" = "do NOT provide data" ]; then
                # Check for error 'Missing uploaded files.'
                if [ "$(echo "$PUBLISHRECORD" | jq .status)" = 400 ] && [ "$(echo "$PUBLISHRECORD" | jq .errors[].field)" = "\"files.enabled\"" ]; then
                    # Seems used zenodo instance does not support
                    # metadata-only records. Try to use empty dummy file.
                    dummyfile="$(mktemp)"
                    FILEUPLOAD=$(curlauth --upload-file "$dummyfile" "$BUCKETURL/dummy")
                    echojq "$FILEUPLOAD"
                    CHECKSUM=$(echo "$FILEUPLOAD" | jq .checksum)
                    test -n "$CHECKSUM" -a "$CHECKSUM" != "null"
                    CHECKSUM=$(echo "$CHECKSUM" | sed 's/"//g' | cut -d ':' -f 2)
                    if [ -n "$DEPLOY2ZENODO_DRYRUN" ] || [ -n "$DEPLOY2ZENODO_SKIPRUN" ]; then
                        echo "Skip testing checksum due to DRYRUN or SKIPRUN."
                    else
                        echo "$CHECKSUM  $dummyfile" | md5sum -c -
                    fi
                    PUBLISHRECORD=$(curlauth --max-time "$CURL_MAX_TIME_PUBLISH" --request POST "$LATESTDRAFT"/actions/publish)
                    echojq "$PUBLISHRECORD"
                fi
            fi
            test "$(echo "$PUBLISHRECORD" | jq .state)" = '"done"'
            test "$(echo "$PUBLISHRECORD" | jq .submitted)" = "true"
        fi
        LATESTID=$(echo "$PUBLISHRECORD" | jq .id)
        echo "#############################"
        echo "# found latest id: $LATESTID"
        echo "#############################"
    fi
fi
if [ -n "$DEPLOY2ZENODO_GET_METADATA" ]; then
    LATESTMETADATA=$(curlauth "$DEPLOY2ZENODO_API_URL"/deposit/depositions/"$LATESTID" | tee "$DEPLOY2ZENODO_GET_METADATA")
    echojq "$LATESTMETADATA"
    test "$(echo "$LATESTMETADATA" | jq .id)" = "$LATESTID"
fi

# stop deploy2zenodo
